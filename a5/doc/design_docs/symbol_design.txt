Symbol Table Design -- CSC488 A3 -- Group 7


In our design, the symbol table is a stack of hash tables, where each hash table stores 
all the symbols in the current scope as we traverse the AST tree. When we encounter a new
scope, a new hash table is created and pushed onto the top of the stack. The hash table
keeps adding new entries as we process declarations and it gets poped out when we exit the 
scope. 

We decided to use hash table to represent symbol table because of its fast access speed. 
The key of the hash table is the string name of the declaration identifier. The value of
the hash table is a Symbol object, where it contains several fields. The first field in
Symbol class is the name of the identifier, which is the same as the hash table's key. 
The second field, kind, is used to determine whether the identifier is a scalar variable,
an array or a function/procedure. The third value, named value, is not used for now 
and may later on represent the value of the scalar variable. The fourth field, type, 
contains two sub-fields. The first one is the type of the scalar variable, or the return
type of the function. The second one, called link, is an object that is used to link
to the function/procedure and array declaration, which is useful during the semantic 
checking. The last two fields of the Symbol class represents the lexic level and the
order number of the declared identifier. 

The operations in symbol table include: adding declarations to the symbol table,
and finding variable declaration from the symbol table. The add_to_symboltable method
will add the identifier to the symbol table and store it in the hashtable representing
the current scope. The find_variable method will find the identifier that appears closest 
to the top (current) scope in the symbol table.

We treat the major scope and minor scope the same in our symbol table design for now in
this assignment. But later on we may change the design of major and minor scope based
on the requirements of the code generation. For semantic analysis purpose, we use each
hashtable to store all the symbols in the current scope, no matter the scope is major
or minor. 

The way we deal with function/procedure parameters is by adding the parameters as variables
to the scope of function/procedure declaration in the symbol table. Thus those parameters
can be referenced from the routine declaration scope. We handle array declarations by 
adding the ArrayDeclPart object of the array to the link field of the SymbolType. This way we
will have enough information about the array (i.e. its bounds information) for the semantic
analysis.

To print out the symbol table, add -D y option when running RUNCOMPILER.sh.

