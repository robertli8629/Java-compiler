{
    % Nested, recursive, forward declared routine calls.

    proc countdown(start : integer) {
        put "Entering: ", start, newline
        if start = 0 then
            put "Done!", newline
            put "Returning: ", start, newline
            return
        fi
        countdown(start - 1)
        put "Returning: ", start, newline
        return
    }

    func fib(term : integer) : integer {
        if term <= 0 then
            result -1
        fi
        if term = 1 or term = 2 then
            result 1
        fi
        result fib(term - 2) + fib(term - 1)
    }

    func two_nested_routines(num : integer) : integer {
        func nested1(i : integer) : integer {
            result i - 10
        }
        func nested2(j : integer) : integer {
            result j + 20
        }
        result nested2(nested1(num))
    }

    % Max lexic levels.
    func a(num : integer) : integer {
     func b(num : integer) : integer {
      func c(num : integer) : integer {
       func d(num : integer) : integer {
        func e(num : integer) : integer {
         func f(num : integer) : integer {
          func g(num : integer) : integer {
           func h(num : integer) : integer {
            func i(num : integer) : integer {
             func j(num : integer) : integer {
              func k(num : integer) : integer {
               func l(num : integer) : integer {
                func m(num : integer) : integer {
                 func n(num : integer) : integer {
                  func o(num : integer) : integer {

                   % One more level causes crash
                   %func p(num : integer) : integer {
                   % result num + 1
                   %}

                   result num + 1
                  }
                  result o(num + 1)
                 }
                 result n(num + 1)
                }
                result m(num + 1)
               }
               result l(num + 1)
              }
              result k(num + 1)
             }
             result j(num + 1)
            }
            result i(num + 1)
           }
           result h(num + 1)
          }
          result g(num + 1)
         }
         result f(num + 1)
        }
        result e(num + 1)
       }
       result d(num + 1)
      }
      result c(num + 1)
     }
     result b(num + 1)
    }

    % Multiple forward declarations
    forward proc print_hello()
    forward func is_zero(value : integer) : boolean

    proc use_forward_routines() {
        print_hello()
        if is_zero(0) then
            put "Zero"
        fi
        return
    }

    func is_zero(value: integer) : boolean {
        result ( value = 0 ? true : false)
    }

    proc print_hello() {
        put "Hello"
        return
    }

    countdown(10)
    put newline

    put "Expected: 6765", newline
    put "Result: ", fib(20), newline, newline

    put "Expected: 15", newline
    put "Result: ", two_nested_routines(5), newline, newline

    put "Expected: 16", newline     % Number of supported lexic levels
    put "Result: ", a(1), newline, newline

    put "Expected: HelloZero", newline
    put "Result: "
    use_forward_routines()
    put newline
}

