{
    % CSC488 A1e
    %
    % A program using recursive functions and procedures, with and without
    % parameters. Includes a nested procedure and function declaration.
    %
    % These routines mostly repeatly output something or repeatedly read
    % input until a certain value is seen.
    %
    % Author: g0haugan
    % Group 7: g1liyuch, g1minmin, g0haugan, g0sharma

    proc repeat_hello(times : integer) {

        proc print_hello() {
            put "Hello", newline
            return
        }

        if (times <= 0)
        then {
            return
        } else {
            print_hello()
            repeat_hello(times - 1)
            return
        }
        fi
    }
    
    var counter : integer

    proc print_five_times() {
    
    	proc print_hello() {
            put "Hello", newline
            return
        }

        if (counter >= 5)
        then {
            return
        } else {
        	counter := counter + 1
        	print_hello()
            print_five_times()
        }
        fi
        return
    }

    func get_fibonacci(element : integer) : integer {
        if (element < 0)
        then {
            put "Element must be >= 0", newline
            result -1
        }
        fi

        if (element = 1 or element = 2)
        then {
            result 1
        } else {
            result get_fibonacci(element - 1) + get_fibonacci(element - 2)
        }
        fi
    }

    func print_five_times_func() : boolean {
    
    	func print_hello_func() : boolean {
            put "Hello", newline
            result true
        }

        if (counter >= 5)
        then {
            result true
        } else {
        	counter := counter + 1
        	print_hello_func()
            result print_five_times_func()
        }
        fi
        result true
    }

    var fib : integer
    var bool : boolean
    
    counter = 0

    repeat_hello(4)
    print_five_times()
    
    counter = 0

    fib := get_fibonacci(10)
    bool := print_five_times_func()
}

