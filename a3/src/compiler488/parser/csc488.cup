// CSC488S Winter 2013/2014  
//
// File:  csc488.cup
//
// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.
import compiler488.ast.stmt.*;
import compiler488.ast.expn.*;
import compiler488.ast.decl.*;
import compiler488.ast.type.*;
import compiler488.ast.Readable;
import compiler488.ast.Printable;
import compiler488.ast.ASTList;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
action code {:

:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError); 
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2013/2014 

// Terminals returned by the scanner with no value attached.  
terminal 	BOOLEAN,	INTEGER,	DO	;
terminal	ELSE,	END,	EXIT,   FI,	FORWARD, FUNC	;
terminal	IF,	GET, 	PROCEDURE,	PUT	;
terminal	WHILE,	REPEAT,	UNTIL,	VAR,	NEWLINE	;
terminal	RESULT,	RETURN,	THEN,	WHEN	;

// Special-character terminals, no value attached
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY  	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE, QUESTION	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

// Non-terminals that have a value.
// nonterminal type  nameList ;

nonterminal Program program ;
nonterminal Scope scope ;
nonterminal Expn constant, primary, factor, term, arithExpn, compareExpn ;
nonterminal Expn negation, conjunction, expression, variable ;
nonterminal ASTList<Stmt> statements ;
nonterminal Stmt statement ;
nonterminal Type type ;
nonterminal DeclarationPart variablename ;
nonterminal ArrayDeclPart bound ;
nonterminal IntConstExpn generalBound ;
nonterminal ASTList<DeclarationPart> variablenames ;
nonterminal Declaration declaration ;
nonterminal ASTList<Declaration> declarations ;
nonterminal RoutineDecl functionHead, procedureHead ;
nonterminal ScalarDecl parameter ;
nonterminal ASTList<ScalarDecl> parameters ;
nonterminal RoutineBody parameterList ;
nonterminal ASTList<Expn> argumentList, arguments ;
nonterminal ASTList<Readable> inputs ;
nonterminal Printable output ;
nonterminal ASTList<Printable> outputs ;

// CSC488S PLEASE NOTE: your grammar CAN NOT use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program		::=	scope:s          // the main program
                {: RESULT = new Program(s); :}
                ;

scope		::=	L_CURLEY declarations:d statements:s R_CURLEY 
							// scope with declarations and statements
                {: RESULT = new Scope(d, s); :}

		|	L_CURLEY statements:stmt  R_CURLEY 		// scope with statments only
            {: RESULT = new Scope(stmt); :}

		|	L_CURLEY  R_CURLEY			// empty scope
            {: RESULT = new Scope(); :}
		;

statements	::=	statement:s				// sequence of statements
                {: RESULT = new ASTList<Stmt>(s); :}

		|	statements:stmtList statement:stmt
            {: RESULT = stmtList.addLast(stmt); :}
		;

declarations	::=	declaration:d		// sequence of declarations
                    {: RESULT = new ASTList<Declaration>(d); :}

		|	declarations:declList declaration:decl
            {: RESULT = declList.addLast(decl); :}
		;


statement	::=	variable:e1 COLON EQUAL expression:e2		// assignment statement
                {: RESULT = new AssignStmt(e1, e2); :}

		|	IF expression THEN statements FI 	// if statements
		|	IF expression THEN statements ELSE statements FI	
		|	WHILE expression DO statements END	// while statement 
		|       REPEAT statements UNTIL expression	// repeat statement
		|	EXIT					// exit statements
            {: RESULT = new ExitStmt(); :}

		|	EXIT WHEN expression:e6
            {:
                ExitStmt ex = new ExitStmt();
                ex.setExpn(e6);
                RESULT = ex;
            :}

		|	RESULT expression:e7 	// return from function
            {:
                ResultStmt res = new ResultStmt();
                res.setValue(e7);
                RESULT = res;
            :}

		|	RETURN 					// return from procedure
            {: RESULT = new ReturnStmt(); :}

		|	PUT outputs:outs			// output statment
            {:
                PutStmt put = new PutStmt();
                put.setOutputs(outs);
                RESULT = put;
            :}

		|	GET  inputs:ins				// input statement
            {:
                GetStmt get = new GetStmt();
                get.setInputs(ins);
                RESULT = get;
            :}

		|	IDENT:id L_PAREN  argumentList:argList  R_PAREN 	// call procedure 
            {:
                ProcedureCallStmt proc = new ProcedureCallStmt();
                proc.setArguments(argList);
                proc.setName(id);
                RESULT = proc;
            :}

		|	scope:s					// embedded scope
            {: RESULT = s; :}
		;

declaration	::=	VAR variablenames:var COLON type:t		// declare scalar/array variables
                {:
                   MultiDeclarations decl = new MultiDeclarations();
                   decl.setElements(var);
                   decl.setType(t);
                   RESULT = decl;
                :}

		|	functionHead:fh1  scope:sc1			// function declaration
			{:
               RoutineBody rb = fh1.getRoutineBody(); 
		       rb.setBody(sc1);
		       RESULT = fh1;
            :}

		|	procedureHead:ph1  scope:sc2			// procedure declaration
            {:
                RoutineBody rb = ph1.getRoutineBody();
                rb.setBody(sc2);
                RESULT = ph1;
            :}
                

		|   FORWARD  functionHead:fh2			// forward function declaration
			{: RESULT = fh2; :}

		|	FORWARD  procedureHead:ph2			// forward procedure declaration
            {: RESULT = ph2; :}
		;

variablenames	::=	variablename:var  		// list of variables being declared
                    {: RESULT = new ASTList<DeclarationPart>(var); :}

		|	variablenames:varList COMMA variablename:var2 
            {: RESULT = varList.addLast(var2); :}
		;

variablename	::=	IDENT:id1 					// scalar variable
				    {:
                        ScalarDeclPart decl = new ScalarDeclPart();
                        decl.setName(id1);
                        RESULT = decl;
                    :}	

		|	IDENT:id2 L_SQUARE bound:b1 R_SQUARE		// 1 dimensional array
		    {:
                b1.setName(id2);
		        RESULT = b1; 
			:}	

		|	IDENT:id3 L_SQUARE bound:b2 COMMA bound:b3 R_SQUARE // 2 dimensional array
			{:
                b2.setName(id3);
                b2.setLowerBoundary2(b3.getLowerBoundary1());
                b2.setUpperBoundary2(b3.getUpperBoundary1());
                b2.setSize(b2.getSize() * b3.getSize()); // Correct size calculation?
                RESULT = b2;
            :}
		;

bound		::=     INTCONST:i				// integer array bound
                    {:
                       ArrayDeclPart decl = new ArrayDeclPart();
                       decl.setLowerBoundary1(1);
                       decl.setUpperBoundary1(i);
                       decl.setSize(i);
                       RESULT = decl; 
					:}

		|       generalBound:g1 DOT DOT generalBound:g2	// explicit lower/upper bounds
                {:
                   ArrayDeclPart decl = new ArrayDeclPart();
                   decl.setLowerBoundary1(g1.getValue());
                   decl.setUpperBoundary1(g2.getValue());
                   decl.setSize((g1.getValue() - g2.getValue()) + 1);
                   RESULT = decl; 
				:}
		;

generalBound	::=	INTCONST:i1			// positive array bound
					{: RESULT = new IntConstExpn(i1); :}

		|	MINUS INTCONST:i2			// negative array bound
		    {: RESULT = new IntConstExpn(-i2); :}
		;

type		::=	INTEGER				// integer type
                {: RESULT = new IntegerType(); :}

		|	BOOLEAN				// boolean type
            {: RESULT = new BooleanType(); :}
		;

functionHead	::=	FUNC IDENT:id L_PAREN parameterList:pl R_PAREN COLON type:t
                    // function head
					{:
                        RoutineDecl routine = new RoutineDecl(); 
						routine.setType(t);
						routine.setName(id);
						routine.setRoutineBody(pl);
						RESULT = routine;
                    :}
		;

procedureHead	::=	PROCEDURE  IDENT:id L_PAREN parameterList:pl  R_PAREN
                    // procedure head
                    {:
                       RoutineDecl routine = new RoutineDecl();
					   routine.setName(id);
				       routine.setRoutineBody(pl);
					   RESULT = routine;
                    :}
		;

outputs		::=	output:out1			// list of output expressions
                {: RESULT = new ASTList<Printable>(out1); :}

		|	outputs:outList COMMA output:out2
            {: RESULT = outList.addLast(out2); :}
		;

output		::=	expression:e	// integer expression
                {: RESULT = e; :}

		|	TEXTCONST:t		// text constant
            {:
                TextConstExpn text = new TextConstExpn();
                text.setValue(t);
                RESULT = text;
            :}

		|	NEWLINE			// newline constant
            {: RESULT = new NewlineConstExpn(); :}
		;

inputs		::=	variable:v1		// list of variables being read into
                {: RESULT = new ASTList<Readable>((Readable) v1); :}

		|	inputs:inputList COMMA variable:v2
            {: RESULT = inputList.addLast((Readable) v2); :}
		;

argumentList	::=	arguments:args		//  function/procedure arguments
                    {: RESULT = args; :}

		|	//  EMPTY
            {: RESULT = new ASTList<Expn>(); :}
		;

arguments	::=	expression:e		// list of function/procedure arguments
                {: RESULT = new ASTList<Expn>(e); :}

		|	arguments:argList COMMA expression:exp
            {: RESULT = argList.addLast(exp); :}
		;

parameterList	::=	parameters:plist		//  function/procedure formal parameters
					{:
                        RoutineBody routbody = new RoutineBody();
					    routbody.setParameters(plist);
					    RESULT = routbody; :}
		|	//  EMPTY
            {: RESULT = new RoutineBody(); :}
		;

parameters	::=	parameter:p1			// list of function/procedure formal parameters
				{: RESULT = new ASTList<ScalarDecl>(p1); :}

		|	parameters:plist COMMA parameter:p2
			{: RESULT = plist.addLast(p2); :}
		;

parameter	::=	IDENT:id COLON type:t		// declare one parameter
				{:
                    ScalarDecl param = new ScalarDecl();   
                    param.setType(t);
		            param.setName(id);
			        RESULT = param;
                :}
		;

expression	::=	conjunction:c			// disjunctions, associate left-to-right
            {: RESULT = c; :}
		|	expression OR conjunction
		;

conjunction	::=	negation:n			// conjunctions, associate left-to-right
            {: RESULT = n; :}
		|	conjunction AND negation
		;

negation	::=	compareExpn:c 			// negations
                {: RESULT = c; :}
		|	NOT negation
		;

compareExpn	::=	arithExpn:a			// comparisons, do not associate
                {: RESULT = a; :}
		|	arithExpn EQUAL arithExpn
		| 	arithExpn NOT EQUAL arithExpn
		|	arithExpn LESS arithExpn
		|	arithExpn LESS EQUAL arithExpn
		|	arithExpn GREATER arithExpn
		|	arithExpn GREATER EQUAL arithExpn
		;

arithExpn	::=	term:t				// expressions, associate + , - left-to-right
                {: RESULT = t; :}
		|	arithExpn  PLUS  term
		|	arithExpn  MINUS term
		;

term		::=	factor:f 		// terms, associate * , /   left-to-right
            {: RESULT = f; :}
		|	term TIMES factor
		|	term DIVIDE factor
		;

factor		::=	primary:p
                {: RESULT = p; :}				
		|	MINUS factor			// unary minus
		;

primary		::=	constant:c				// integer or boolean constant
                {: RESULT = c; :}
		|	variable				// scalar, array element 
		| 	L_PAREN  expression  R_PAREN		// parenthesized expression
		|	L_PAREN  expression QUESTION expression COLON expression R_PAREN
								// conditional expression
		|	IDENT:id L_PAREN argumentList R_PAREN 	// function call
			{:	FunctionCallExpn func = new FunctionCallExpn(); 
			   	func.setIdent(id);
				RESULT = func;
			:}
		;

constant	::=	INTCONST:i	// integer constant
                {: RESULT = new IntConstExpn(i); :}
		|	TRUE		// constant true
				{:	RESULT = new BoolConstExpn(true); :}
		|	FALSE		// constant false
				{:  RESULT = new BoolConstExpn(false); :}
		;

variable	::=	IDENT:id1			// scalar variable or parameter
                {: RESULT = new IdentExpn(id1); :}

		|	IDENT:id2 L_SQUARE expression:e1 R_SQUARE	// element of 1 dimensional array
            {:
                SubsExpn sub = new SubsExpn(e1, null);
                sub.setVariable(id2);
                RESULT = sub;
            :}
                
		|   IDENT:id3 L_SQUARE expression:e2 COMMA expression:e3 R_SQUARE	// element of 2 dimensional array
            {:
                SubsExpn sub = new SubsExpn(e2, e3);
                sub.setVariable(id3);
                RESULT = sub;
            :}
		;

