Symbol Table Design -- CSC488 A3 -- Group 7


In our design, the symbol table is a stack of hash table, where each hash table stores 
all the symbol in the current scope as we traverse the AST tree. When we encounter a new
scope, a new hash table is created and pushed onto the top of the stack. It keeps adding
new declaration as we process declarations and it gets poped out when we exit the 
scope. 

We decided to use hash table to represent symbol table because of its fast access speed. 
The key of the hash table is the string name of the declaration identifier. The value of
the hash table is a Symbol object, where it contains several fields. The first field in
Symbol class is the name of the identifier, which is the same as the hash table's key. 
The second field, kind, is used to determine whether the identifier is a scalar variable,
an array or a function/procedure. The third value, named value, is not used for now 
and may later on represent the value of the scalar variable. The fourth field, type, 
contains two sub-fields. The first one is the type of the scalar variable, or the return
type of the function. The second one, called link, is an object that is used to link
to the function/procedure and array declaration, which is useful during the semantic 
checking. The last two fields of the Symbol class represents the lexic level and the
order number of the declared identifier. 

To print out the symbol table, add -D a option when running RUNCOMPILER.sh.

