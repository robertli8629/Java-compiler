AST Design Document -- CSC488 A3 -- Group 7


In building the AST, we attempted to make changes to the provided AST node
classes very economically, only adding things we felt necessary and otherwise
using the code provided.

One of the additions we made involved adding two integer fields to the AST
class, and thus all its subclasses. These two fields, line and col, are used
to pass token line number and column information from the lexer through to the
AST so it is available during semantic analysis. We chose to add these fields
to the AST class since every other class would then inherit them, along with the
setters and getters we added. This avoided a lot of repeated code and
messiness elswhere.

The getters for these fields add one to the value, since we noticed that the
lexer counts newlines as its line count and counts the characters up to but not
including the first character of a token for its character count. Thus,
these two numbers if used directly appeared to be off by one.

In a few cases, such as with the IntConstExpn, BoolConstExpn, IdentExpn,
and SubsExpn we added simple constructors to the classes to cut down on
code in the CUP file to create these objects. We only did this for a few
of the simpler classes though and chose to use the provided setters elsewhere
to avoid spending a lot of time generating new boilerplate constructor code.

At this time, we did not add type fields to the Expn class hierachy to record
expression types, nor did we add fields to any classes to store links to symbol
table entries. We will keep these ideas in mind for the next steps of the
project and add them in if they look useful, but for now they did not seem
necessary for our semantic processing. Types of expressions are determined
once by a recursive, depth-first traversal of the expression subtree that
returns the overall type.

For the most part, the provided classes fit very nicely with what was needed
for the different non-terminals. However, we did create a new expression
class called ParenthExpn to represent a parenthesized expression. This class
contains one child Expn, which is the expression contained in the parentheses,
along with an appropriate toString method. We chose to add this class so our
AST could contain an explicit node representing the parenthesized expression
and no existing class was well suited to this.

The final issue we came up against was how to store declarations in the AST.
Since multiple variables of the same type can be declared in a single line,
we needed to generate lists of declarations for such cases. Yet, there was no
easy way to distinguish in the grammar between these multi-declarations and
single declarations. We needed to create a list in either case.

As a result, we made heavy use of the MultiDeclarations class. The list of
declarations in a scope within the AST will contain RoutineDecls or
MultiDeclarations, with the MultiDeclarations containing ArrayDeclParts and
ScalarDeclParts. Even in the case of a single array or scalar declaration,
the declaration in the AST with be a MultiDeclaration containing the
appropriate DeclarationPart class.

This solved what seemed to be a tricky problem at first and seemed a more
straightforward approach than creating a number of additional classes
to meet our needs, which was approach we considered.

One problem with this approach was that declarations inside a MultiDeclaration
were not properly indented when dumping the AST. To fix this, we altered the
toString and printOn functions associated with the MultiDeclaration so that
each declaration inside the MultiDeclaration list would be indented properly
and printed on its own line. This made our debugging and testing of the AST
easier. The toString method now includes a print out of all the elements
inside the MultiDeclaration, and we removed the class-specific printOn
implementation that was overriding the inhereted version. This fixed the
indentation problems.

